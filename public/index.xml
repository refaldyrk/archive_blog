<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Refaldy Blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Refaldy Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© Refaldy</copyright>
    <lastBuildDate>Mon, 25 Mar 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Short Polling, Long Polling, Websocket, dan Server-Sent Events</title>
      <link>http://localhost:1313/posts/communicate/</link>
      <pubDate>Mon, 25 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/communicate/</guid>
      <description>Pendahuluan: Dalam pengembangan aplikasi web modern, pemilihan teknik komunikasi yang tepat antara klien dan server sangat penting untuk memastikan responsivitas dan efisiensi. Dalam artikel ini, kita akan menjelajahi lebih dalam tentang berbagai teknik komunikasi di web, termasuk short polling, long polling, websocket, dan server-sent events (SSE), serta memahami kelebihan, kelemahan, dan penggunaan terbaik dari masing-masing teknik.&#xA;1. Short Polling: Short polling adalah teknik di mana klien secara berkala melakukan permintaan ke server untuk memeriksa apakah ada pembaruan data.</description>
    </item>
    <item>
      <title>Asynchronous != Concurrency</title>
      <link>http://localhost:1313/posts/asynchronous-concurrency/</link>
      <pubDate>Sun, 24 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/asynchronous-concurrency/</guid>
      <description>Asynchronous != Concurrency&#xA;Hi Gophers, Sebagai seorang developer backend dengan bahasa pemrograman Go, Anda terus berhadapan dengan kebutuhan untuk mengelola operasi-operasi yang membutuhkan waktu dan menangani banyak permintaan secara bersamaan. Dalam dunia pemrograman modern, terdapat dua konsep yang sering kali menjadi pusat perhatian: Asynchronous dan Concurrency. Dalam artikel ini, kita akan menjelajahi perbedaan mendasar antara keduanya serta menggali bagaimana kedua konsep ini berperan dalam pengembangan aplikasi backend menggunakan Go.&#xA;Apa itu Asynchronous Programming?</description>
    </item>
    <item>
      <title>Value Receiver Vs Pointer Receiver</title>
      <link>http://localhost:1313/posts/receiver/</link>
      <pubDate>Sat, 23 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/receiver/</guid>
      <description>Hi Gophers, Di kesempatan kali ini saya akan membahas apa itu Value Receiver Dan Pointer Receiver.&#xA;Saat kita membuat method di golang pasti kita akan membuat receiver namun, seringkali tidak tau ingin menggunakan&#xA;func (r receiver) name() {} Atau&#xA;func (r *receiver) name() {} Ada yang tau bedanya apa? Nah disini kita akan bahas apa bedanya value receiver dan pointer receiver.&#xA;Value Receiver Pertama kita bakal kenalan dulu sama Value Receiver.</description>
    </item>
    <item>
      <title>About</title>
      <link>http://localhost:1313/about/</link>
      <pubDate>Fri, 22 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/about/</guid>
      <description>This blog was created to record all my work to share as a lesson, whether it&amp;rsquo;s solving a problem or learning something new.&#xA;My Site: https://refaldy.pages.dev</description>
    </item>
    <item>
      <title>Youtube Download With Golang</title>
      <link>http://localhost:1313/posts/ytdl-go/</link>
      <pubDate>Fri, 22 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/ytdl-go/</guid>
      <description>Hai, Saya Mempunyai Library Untuk Download Video Atau Audio Dari Link Youtube.&#xA;Saya Mendapat Source Dari y2mate.com.&#xA;Anda Bisa Melihat Source Saya Di Sini.&#xA;Cara Menggunakan 1. Install Lib go get -u github.com/refaldyrk/ytdl-go 2. Mulai package main import ( &amp;#34;encoding/json&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;github.com/refaldyrk/ytdl-go/service&amp;#34; ) func main() { yt := service.NewYtdl() result, err := yt.DetailVideo(&amp;#34;https://www.youtube.com/watch?v=yC6e7lY8BWQ&amp;#34;) if err != nil { fmt.Println(err) } //Handle Mp4 for _, v := range result.Links.Mp4 { data := map[string]string{} //Marshal byteJson, _ := json.</description>
    </item>
    <item>
      <title></title>
      <link>http://localhost:1313/archives/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/archives/</guid>
      <description></description>
    </item>
  </channel>
</rss>
